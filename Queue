/*
queue:
principle --> FIFO  first in first out  || LILO last in last out
two ends -- front(deletion --> deque)  rear(insertion --> enque)
if front==rear==-1  & front==(size-1) --> queue is empty (underflow --> isempty()) 
rear==size-1 --> queue is full (overflow --> isfull())
*/
#include<stdio.h>
#include<stdlib.h>
int rear=-1,front=-1;
int n,*que;
void enque(int val)
{
	if(rear==n-1)
	{
		printf("Queue is overflow \n");
	}
	else if(front==-1 && rear==-1)
	{
		que[++rear]=val;
		front++;
	}
	else
	{
		que[++rear]=val;
	}
}
int deque(int val)
{
	if(front==-1 && rear==-1)
	{
		return -1;
    }
    else if (front==rear)
    {
    	val=que[front];
	 	front=-1;
    	rear=-1;
    	return val;
	}
	else
	{
		val=que[front];
		front++;
	}

}
void display()
{
	int i;
	if(front==-1 && rear==-1)
	{
		printf("Queue is underflow \n");
	}
	else
	{
		for(i=front;i<=rear;i++)
		{
			printf("%d \n",que[i]);
		}
	}
	
}
int main()
{
	int i,ch,val;
	scanf("%d",&n);//size of queue
	que=(int *)calloc(n,sizeof(int));
	while(1)
	{
		printf("1.ENQUE 2.DEQUE 3.DISPLAY 4.EXIT :- ");
		scanf("%d",&ch);
		if(ch==1)
		{
			//enque function
			scanf("%d",&val);
			enque(val);//calling push function
		}
		else if(ch==2)
		{
			//deque function
			val=deque(val);
			if(val==-1)
			{
				printf("Queue is underflow\n");	
			}
			else
			{
				printf("%d\n",val);
			 	
			}
		}
		else if(ch==3)
		{
			//display function
			display();
		}
		else if(ch==4)
		{
			//exit
			break;
		}
		else
		{
			printf("Invalid Number\n");
		}
	}
}
